{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"autogroceries","text":"<p><code>autogroceries</code> simplifies grocery shopping by using Playwright to automate the addition of ingredients to your basket.</p>"},{"location":"#installation","title":"Installation","text":"<p>I recommend using uv to manage the python version, virtual environment and <code>autogroceries</code> installation:</p> <pre><code>uv venv --python 3.13\nsource .venv/bin/activate\nuv pip install autogroceries\n# Install Chromium browser binary required for playwright.\nplaywright install chromium\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p><code>autogroceries</code> uses Playwright to interface with the Sainsbury's website, automatically filling your cart with an inputted list of ingredients. <code>autogroceries</code> can be used as a CLI tool or a python package.</p>"},{"location":"#cli","title":"CLI","text":"<p><code>autogroceries</code> has a single CLI command:</p> <pre><code>\u276f autogroceries --help\nUsage: autogroceries [OPTIONS]\n\n  Automate your grocery shopping using playwright.\n\n  Please set the [STORE]_USERNAME and [STORE]_PASSWORD in a .env file in the\n  same directory you run autogroceries. Replace [STORE] with the store name in\n  caps e.g. SAINSBURYS_USERNAME.\n\nOptions:\n  --store [sainsburys|waitrose]  The store to shop at.  [required]\n  --ingredients-path PATH        Path to csv file (without header) detailing\n                                 ingredients. Each line should in format\n                                 'ingredient,quantity' e.g. 'eggs,2'.\n                                 [required]\n  --log-path PATH                If provided, will output shopping log to this\n                                 path.\n  --help                         Show this message and exit.\n</code></pre> <p>The <code>autogroceries</code> CLI expects a <code>.env</code> file in the same directory from where you execute the command. This <code>.env</code> will be loaded by python-dotenv and should define the \"[STORE]_USERNAME\" and \"[STORE]_PASSWORD\" variables, with \"[STORE]\" replaced by the name of the store in uppercase, for instance:</p> <pre><code># .env\nSAINSBURYS_USERNAME=your_username\nSAINSBURYS_PASSWORD=your_password\n</code></pre>"},{"location":"#python-package","title":"Python package","text":"<p><code>autogroceries</code> can be used as a Python package, making it easy to integrate automated grocery shopping into scripts or pipelines.</p> <p>There are currently two available <code>Shopper</code>s, <code>autogroceries.shopper.sainsburys.SainsburysShopper</code> and <code>autogroceries.shopper.waitrose.WaitroseShopper</code>. All <code>Shopper</code>s have a <code>shop</code> method which takes as input a dictionary of ingredients and the desired quantity of each, for example:</p> <pre><code>from autogroceries.shopper.sainsburys import SainsburysShopper\n\n# Store credentials securely e.g. in environment variables (loaded with python-dotenv).\nshopper = SainsburysShopper(\n        username=os.getenv(\"SAINSBURYS_USERNAME\"),\n        password=os.getenv(\"SAINSBURYS_PASSWORD\"),\n    )\n\nshopper.shop({\"lemon\": 1, \"tomatoes\": 2})\n</code></pre>"},{"location":"#demo-autogroceries-in-action","title":"Demo: autogroceries in action","text":"Your browser does not support the video tag."},{"location":"#disclaimer","title":"Disclaimer","text":"<p>\ufe0f<code>autogroceries</code> is developed for educational use only. Users are responsible for:</p> <ul> <li>Following website's <code>robots.txt</code> and Terms of Service.</li> <li>Using appropriate delays and respecting rate limits.</li> <li>Complying with applicable laws.</li> </ul>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#autogroceries.shopper.base","title":"<code>autogroceries.shopper.base</code>","text":""},{"location":"api/#autogroceries.shopper.base.Shopper","title":"<code>Shopper</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for a shopper.</p> <p>Handles the Playwright and logger setup.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>Username for the shopping account.</p> required <code>password</code> <code>str</code> <p>Password for the shopping account.</p> required <code>log_path</code> <code>Path | None</code> <p>Optional. If provided, will output log to this path.</p> <code>None</code> Source code in <code>src/autogroceries/shopper/base.py</code> <pre><code>class Shopper(ABC):\n    \"\"\"\n    Abstract base class for a shopper.\n\n    Handles the Playwright and logger setup.\n\n    Args:\n        username: Username for the shopping account.\n        password: Password for the shopping account.\n        log_path: Optional. If provided, will output log to this path.\n    \"\"\"\n\n    USER_AGENT = (\n        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 \"\n        \"(KHTML, like Gecko) Version/17.6 Safari/605.1.15\"\n    )\n\n    def __init__(\n        self, username: str, password: str, log_path: Path | None = None\n    ) -&gt; None:\n        self.username = username\n        self.password = password\n        self.logger = setup_logger(log_path)\n\n    def setup_page(self, p: Playwright) -&gt; Page:\n        \"\"\"\n        Setup a Playwright page with configuration.\n\n        Args:\n            p: A Playwright instance.\n\n        Returns:\n            Playwright page with user agent and context.\n        \"\"\"\n        browser = p.chromium.launch(\n            headless=False,\n            args=[\n                \"--disable-blink-features=AutomationControlled\",\n                \"--no-sandbox\",\n                \"--disable-dev-shm-usage\",\n            ],\n        )\n\n        context = browser.new_context(\n            user_agent=self.USER_AGENT,\n            viewport={\"width\": 1366, \"height\": 768},\n            locale=\"en-GB\",\n            timezone_id=\"Europe/London\",\n        )\n\n        return context.new_page()\n\n    @abstractmethod\n    def shop(self, ingredients: dict[str, int]) -&gt; None:\n        \"\"\"\n        Shop for ingredients.\n\n        Args:\n            ingredients: Keys are the ingredients to add to the basket and values are\n                the desired quantity of each ingredient.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"api/#autogroceries.shopper.base.Shopper.setup_page","title":"<code>setup_page(p)</code>","text":"<p>Setup a Playwright page with configuration.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Playwright</code> <p>A Playwright instance.</p> required <p>Returns:</p> Type Description <code>Page</code> <p>Playwright page with user agent and context.</p> Source code in <code>src/autogroceries/shopper/base.py</code> <pre><code>def setup_page(self, p: Playwright) -&gt; Page:\n    \"\"\"\n    Setup a Playwright page with configuration.\n\n    Args:\n        p: A Playwright instance.\n\n    Returns:\n        Playwright page with user agent and context.\n    \"\"\"\n    browser = p.chromium.launch(\n        headless=False,\n        args=[\n            \"--disable-blink-features=AutomationControlled\",\n            \"--no-sandbox\",\n            \"--disable-dev-shm-usage\",\n        ],\n    )\n\n    context = browser.new_context(\n        user_agent=self.USER_AGENT,\n        viewport={\"width\": 1366, \"height\": 768},\n        locale=\"en-GB\",\n        timezone_id=\"Europe/London\",\n    )\n\n    return context.new_page()\n</code></pre>"},{"location":"api/#autogroceries.shopper.base.Shopper.shop","title":"<code>shop(ingredients)</code>  <code>abstractmethod</code>","text":"<p>Shop for ingredients.</p> <p>Parameters:</p> Name Type Description Default <code>ingredients</code> <code>dict[str, int]</code> <p>Keys are the ingredients to add to the basket and values are the desired quantity of each ingredient.</p> required Source code in <code>src/autogroceries/shopper/base.py</code> <pre><code>@abstractmethod\ndef shop(self, ingredients: dict[str, int]) -&gt; None:\n    \"\"\"\n    Shop for ingredients.\n\n    Args:\n        ingredients: Keys are the ingredients to add to the basket and values are\n            the desired quantity of each ingredient.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/#autogroceries.shopper.sainsburys","title":"<code>autogroceries.shopper.sainsburys</code>","text":""},{"location":"api/#autogroceries.shopper.sainsburys.SainsburysShopper","title":"<code>SainsburysShopper</code>","text":"<p>               Bases: <code>Shopper</code></p> <p>Shops for ingredients at Sainsbury's.</p> <p>init is inherited from the <code>autogroceries.shopper.base.Shopper</code> abstract base class.</p> Source code in <code>src/autogroceries/shopper/sainsburys.py</code> <pre><code>class SainsburysShopper(Shopper):\n    \"\"\"\n    Shops for ingredients at Sainsbury's.\n\n    __init__ is inherited from the `autogroceries.shopper.base.Shopper` abstract base\n    class.\n    \"\"\"\n\n    URL = \"https://www.sainsburys.co.uk\"\n\n    def shop(self, ingredients: dict[str, int]) -&gt; None:\n        \"\"\"\n        Shop for ingredients at Sainsbury's.\n\n        Args:\n            ingredients: Keys are the ingredients to add to the basket and values are\n                the desired quantity of each ingredient.\n        \"\"\"\n        self.logger.info(\"----- Shopping at Sainsbury's -----\")\n\n        with sync_playwright() as p:\n            self.page = self.setup_page(p)\n\n            self.page.goto(self.URL)\n            self._handle_cookies()\n\n            self._go_to_login()\n            self._handle_cookies()\n\n            self._login()\n            self._check_two_factor()\n            self._check_empty_basket()\n\n            for ingredient, n in ingredients.items():\n                self._add_ingredient(ingredient, n)\n\n        self.logger.info(\"----- Done -----\")\n\n    @delay\n    def _handle_cookies(self) -&gt; None:\n        \"\"\"\n        Handle the cookie pop up, which otherwise masks the rest of the page.\n        \"\"\"\n        try:\n            button_selector = \"button:has-text('Continue without accepting')\"\n            self.page.wait_for_selector(button_selector, timeout=3000)\n            self.page.locator(button_selector).click()\n            self.logger.info(\"Rejecting cookies\")\n        except TimeoutError:\n            self.logger.info(\"No cookies popup found\")\n            pass\n\n    @delay\n    def _go_to_login(self) -&gt; None:\n        \"\"\"\n        Go to the login page.\n        \"\"\"\n        self.page.locator(\"text=Log in\").click()\n        self.page.locator(\"text=Groceries account\").click()\n\n    @delay\n    def _login(self) -&gt; None:\n        \"\"\"\n        Login with the provided username and password.\n        \"\"\"\n        self.page.type(\"#username\", self.username, delay=50)\n        self.page.type(\"#password\", self.password, delay=50)\n        self.page.locator(\"button:has-text('Log in')\").click()\n\n    @delay\n    def _check_two_factor(self) -&gt; None:\n        \"\"\"\n        Check if two-factor authentication is required.\n\n        Raises:\n            TwoFactorAuthenticationRequiredError: If required, user must manually login\n                to their account first.\n        \"\"\"\n        try:\n            self.page.wait_for_selector(\n                \"text=Enter the code sent to your phone\", timeout=3000\n            )\n            raise TwoFactorAuthenticationRequiredError(\n                \"Two-factor authentication required. Please login to your account \"\n                \"manually then rerun autogroceries.\"\n            )\n        except TimeoutError:\n            self.logger.info(\"Login successful (no two-factor authentication required)\")\n            pass\n\n    @delay\n    def _check_empty_basket(self) -&gt; None:\n        \"\"\"\n        Check if basket is initially empty.\n\n        If basket not empty, autogroceries will error if it tries to add a product that\n        is already in the basket.\n        \"\"\"\n        if self.page.locator(\".header-trolley \").count() &gt; 0:\n            self.logger.warning(\n                \"Basket is not initially empty. This may cause issues when adding products.\"\n            )\n\n    @delay\n    def _add_ingredient(self, ingredient: str, n: int) -&gt; None:\n        \"\"\"\n        Search for and add product to basket matching a provided ingredient.\n\n        Args:\n            ingredient: The ingredient you would like to buy.\n            n: The desired quantity of the ingredient.\n        \"\"\"\n        # There are two search inputs on the same page, use the first.\n        search_input = self.page.locator(\"#search-bar-input\").first\n        search_input.type(ingredient, delay=50)\n        self.page.locator(\".search-bar__button\").first.click()\n\n        try:\n            # If no product found in 10s, skip this ingredient.\n            self.page.wait_for_selector(\n                \".product-tile-row\",\n                state=\"visible\",\n                timeout=10000,\n            )\n\n            products = self.page.locator('[data-testid^=\"product-tile-\"]').all()\n\n            selected_product = None\n            for i, product in enumerate(products):\n                # Only check the first 5 products.\n                if i &gt;= 5:\n                    break\n\n                # Default to selecting the first product.\n                if i == 0:\n                    selected_product = product\n\n                # Prefer favourited products.\n                if (\n                    product.locator(\"button[data-testid='favourite-icon-full']\").count()\n                    &gt; 0\n                ):\n                    selected_product = product\n                    break\n\n            if selected_product:\n                product_name = selected_product.locator(\n                    \".pt__info__description\"\n                ).text_content()\n                self.logger.info(f\"{n} {ingredient.title()}: {product_name}\")\n\n                for i in range(n):\n                    if i == 0:\n                        selected_product.locator(\n                            \"button[data-testid='add-button']\"\n                        ).click(delay=100)\n                    else:\n                        selected_product.locator(\n                            \"button[data-testid='pt-button-inc']\"\n                        ).click(delay=100)\n\n        except TimeoutError:\n            self.logger.warning(f\"{n} {ingredient.title()}: no matching product found\")\n\n        search_input.clear()\n</code></pre>"},{"location":"api/#autogroceries.shopper.sainsburys.SainsburysShopper.shop","title":"<code>shop(ingredients)</code>","text":"<p>Shop for ingredients at Sainsbury's.</p> <p>Parameters:</p> Name Type Description Default <code>ingredients</code> <code>dict[str, int]</code> <p>Keys are the ingredients to add to the basket and values are the desired quantity of each ingredient.</p> required Source code in <code>src/autogroceries/shopper/sainsburys.py</code> <pre><code>def shop(self, ingredients: dict[str, int]) -&gt; None:\n    \"\"\"\n    Shop for ingredients at Sainsbury's.\n\n    Args:\n        ingredients: Keys are the ingredients to add to the basket and values are\n            the desired quantity of each ingredient.\n    \"\"\"\n    self.logger.info(\"----- Shopping at Sainsbury's -----\")\n\n    with sync_playwright() as p:\n        self.page = self.setup_page(p)\n\n        self.page.goto(self.URL)\n        self._handle_cookies()\n\n        self._go_to_login()\n        self._handle_cookies()\n\n        self._login()\n        self._check_two_factor()\n        self._check_empty_basket()\n\n        for ingredient, n in ingredients.items():\n            self._add_ingredient(ingredient, n)\n\n    self.logger.info(\"----- Done -----\")\n</code></pre>"},{"location":"api/#autogroceries.delay","title":"<code>autogroceries.delay</code>","text":""},{"location":"api/#autogroceries.delay.delay","title":"<code>delay(_func=None, *, delay=2)</code>","text":"<p>Decorator that adds a random length delay before executing a function.</p> <p>Intended to emulate human-like behaviour during browser interaction to respect rate limits.</p> Source code in <code>src/autogroceries/delay.py</code> <pre><code>def delay(_func=None, *, delay: int = 2) -&gt; Callable:\n    \"\"\"\n    Decorator that adds a random length delay before executing a function.\n\n    Intended to emulate human-like behaviour during browser interaction to respect rate\n    limits.\n    \"\"\"\n\n    def decorator_delay(func):\n        @functools.wraps(func)\n        def wrapper_delay(*args, **kwargs):\n            # Add a random delay (up to 0.5 seconds).\n            time.sleep(delay + random.uniform(0, 0.5))\n            return func(*args, **kwargs)\n\n        return wrapper_delay\n\n    if _func is None:\n        return decorator_delay\n    else:\n        return decorator_delay(_func)\n</code></pre>"},{"location":"api/#autogroceries.logging","title":"<code>autogroceries.logging</code>","text":""},{"location":"api/#autogroceries.logging.setup_logger","title":"<code>setup_logger(log_path=None)</code>","text":"<p>Setup logger.</p> <p>Parameters:</p> Name Type Description Default <code>log_path</code> <code>Path | None</code> <p>Optional. If provided, will output log to this path.</p> <code>None</code> <p>Returns:</p> Type Description <code>Logger</code> <p>Logger with the desired configuration.</p> Source code in <code>src/autogroceries/logging.py</code> <pre><code>def setup_logger(log_path: Path | None = None) -&gt; logging.Logger:\n    \"\"\"\n    Setup logger.\n\n    Args:\n        log_path: Optional. If provided, will output log to this path.\n\n    Returns:\n        Logger with the desired configuration.\n    \"\"\"\n    formatter = logging.Formatter(\n        \"%(asctime)s [%(levelname)s] - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\"\n    )\n    root_logger = logging.getLogger()\n\n    if log_path:\n        # Create directory in log_path if it does not exist.\n        log_path.parent.mkdir(parents=True, exist_ok=True)\n        file_handler = logging.FileHandler(log_path, encoding=\"utf-8\")\n        file_handler.setFormatter(formatter)\n        root_logger.addHandler(file_handler)\n\n    stream_handler = logging.StreamHandler()\n    stream_handler.setFormatter(formatter)\n    root_logger.addHandler(stream_handler)\n\n    root_logger.setLevel(logging.INFO)\n\n    return logging.getLogger(__name__)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v220-08092025","title":"v2.2.0 (08/09/2025)","text":"<ul> <li>Add <code>WaitroseShopper</code>.</li> </ul>"},{"location":"changelog/#v210-08092025","title":"v2.1.0 (08/09/2025)","text":"<ul> <li>Add CLI for running <code>autogroceries</code>.</li> </ul>"},{"location":"changelog/#v200-07092025","title":"v2.0.0 (07/09/2025)","text":"<ul> <li> <p>Refactor to use modern python practices:</p> <ul> <li><code>uv</code> for python packaging.</li> <li>Revamp CI workflow.</li> <li>Replace <code>selenium</code> with <code>Playwright</code>.</li> <li>Add use <code>ruff</code> and <code>mypy</code> for pre-commit hooks and add type hints.</li> <li>Improve code design and structure.</li> <li>Add logging, docs and docstrings.</li> </ul> </li> </ul>"},{"location":"changelog/#v103-01082022","title":"v1.0.3 (01/08/2022)","text":"<ul> <li>Update to depend on python version 3.10. This resolves some security issues in dependencies and permits use of the latest <code>selenium</code>/<code>webdriver</code> versions.</li> </ul>"},{"location":"changelog/#v102-18062022","title":"v1.0.2 (18/06/2022)","text":"<ul> <li>Fix problem obtaining the product elements using <code>_get_products</code>.</li> </ul>"},{"location":"changelog/#v101-26032022","title":"v1.0.1 (26/03/2022)","text":"<ul> <li>Change output of <code>SainsburysShopper</code> to <code>pandas.DataFrame()</code>.</li> </ul>"},{"location":"changelog/#v100-24032022","title":"v1.0.0 (24/03/2022)","text":"<ul> <li>First release of <code>autogroceries</code>!</li> </ul>"}]}