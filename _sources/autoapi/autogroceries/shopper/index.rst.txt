:py:mod:`autogroceries.shopper`
===============================

.. py:module:: autogroceries.shopper


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   SainsburysShopper/index.rst
   Shopper/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   autogroceries.shopper.Shopper
   autogroceries.shopper.SainsburysShopper




.. py:class:: Shopper(url, items, n_items=None, headless=False)

   Automates grocery shopping from a user-inputted URL

   A Shopper object contains methods to open a grocery website and also store
   the details of the food items that are desired to be ordered. Shopper class
   is not intended to be used to created instances, rather be a (virtual) class
   for child Shopper classes to inherit utility methods and attributes from.

   :param url: URL of the grocery store website to order from.
   :type url: str
   :param items: List of items to search for and order.
   :type items: list
   :param n_items: List of equal length to items, determining the number of each item to
                   order.
   :type n_items: list
   :param headless: Whether to open the Selenium webdriver in headless mode, exists mostly
                    for testing.
   :type headless: bool

   .. py:method:: close_driver(self)


   .. py:method:: url(self)
      :property:

      Return the URL of Shopper


   .. py:method:: headless(self)
      :property:

      Return the headless attribute of Shopper


   .. py:method:: items(self)
      :property:

      Return the items attribute of Shopper


   .. py:method:: n_items(self)
      :property:

      Return the n_items attribute of Shopper


   .. py:method:: webdriver(self)
      :property:

      Return the webdriver attribute of Shopper


   .. py:method:: webdriver_manager(self)
      :property:

      Return the webdriver_manager attribute of Shopper


   .. py:method:: driver(self)
      :property:

      Return the driver attribute of Shopper


   .. py:method:: _open_driver(self)

      Open a driver using Selenium (in headless mode if preferred)

      Currently can only use Chrome as the browser.


   .. py:method:: _open_url(self)

      Open the URL attribute in Shopper


   .. py:method:: _check_driver_is_not_none(self)

      Checks driver has been opened (before trying to open URL)


   .. py:method:: _check_headless(headless)
      :staticmethod:

      Checks format of headless


   .. py:method:: _check_items(items)
      :staticmethod:

      Check format of items


   .. py:method:: _check_n_items(items, n_items)
      :staticmethod:

      Check format of n_items



.. py:class:: SainsburysShopper(items, n_items=None)

   Bases: :py:obj:`autogroceries.shopper.Shopper`

   Automates grocery shopping from the Sainsbury's website

   A SainsburysShopper object contains methods to open, login to, search items
   within and add products to a user's cart from the Sainsbury's website.

   :param items: List of items to search for and add to cart.
   :type items: list
   :param n_items: List of equal length to items, determining the number of each item to
                   order. If left as None, will assume user desires 1 of each item.
   :type n_items: list, default None

   .. rubric:: Examples

   >>> ss = SainsburysShopper(['tomato', 'lemon'], [1, 2])
   >>> ss.shop("UN", "PW")

   .. py:method:: shop(self, username, password, file=None)

      Automatically fill your Sainsbury's cart with selected items

      Search the Sainsbury's grocery products for each item in turn, then add
      the products found to the user's cart.


      :param username: Username for Sainsbury's grocery account.
      :type username: str
      :param password: Password for Sainsbury's grocery account.
      :type password: str
      :param file: If entered, must be a path to save the names of the items searched
                   and products added to the cart as a csv.
      :type file: None or str, default None

      :returns: Keys as the names of the items searched and values as the names of
                the products added to cart.
      :rtype: dict


   .. py:method:: _add_products_to_cart(self)

      Add products to the cart

      Loops across the items, searches their name and adds corresponding
      product results to user's Sainsbury's cart. A 'Not found' str is used to
      mark items that did not have corresponding product found in the
      Sainsbury's store.

      :returns: The names of the Sainsbury's products that were added to the cart,
                corresponding to each searched item.
      :rtype: list


   .. py:method:: _open_sainsburys(self)

      Opens a Selenium webdriver and navigate to the Sainsbury's website

      Initialises the self.driver attribute, required for all of the remaining
      SainsburysShopper methods.


   .. py:method:: _accept_cookies(self)

      Click accept all cookies

      Accepts cookies on the Sainsbury's website, to avoid cookies popup
      masking other required elements on the page (e.g. the search bar).


   .. py:method:: _to_login(self)

      Navigate to the Sainsbury's grocery account login page


   .. py:method:: _login(self, username, password)

      Login to the Sainsbury's website

      Sainsbury's does have a two-factor authentication system in place.
      When logging in for the first time in a while, users are required to
      enter a code (obtained via email) to verify their identify. This can
      cause issues with the _login method. Currently, the only solution is to
      first login and complete the two-factor authentication manually before
      running .shop().

      :param username: Username for Sainsbury's grocery account.
      :type username: str
      :param password: Password for Sainsbury's grocery account.
      :type password: str


   .. py:method:: _search_item(self, item)

      Search for an item

      :param item: Name of the current item to be searched.
      :type item: str


   .. py:method:: _check_popup(self)

      Click no Sainsbury's popup

      The Sainsbury's website periodically has a popup that offers users a
      chance to enter a competition by filling a survey. This overlays the
      site and obscures some of the elements required by SainsburysShopper.
      This method clicks the 'no' option on the popup.


   .. py:method:: _get_products(self)

      Obtain products that result from searching an item

      Obtains the webelements that correspond to the Sainsbury's products
      found for the current searched item. As of now, this limits the number
      of products to the first 5, however there is scope to make this
      user-defined in future if needed.


   .. py:method:: _select_item(products)
      :staticmethod:

      Select the product to add to cart

      If there is more than 1 product found via the search, this function will
      select one to add to cart, by either picking a favourites or selecting
      the first product arbitrarily if no favourites are found.

      :param products: Contains webelements corresponding to the Sainsbury's products
                       resulting from searching the current item.
      :type products: list

      :returns: The webelement corresponding to the chosen item to be added to cart.
      :rtype: selenium.webdriver.remote.webelement.WebElement


   .. py:method:: _add_product(self, selected_product, n)

      Add the selected item to the Sainsbury's cart

      :param selected_product: The webelement corresponding to the selected product to be added to
                               cart
      :type selected_product: selenium.webdriver.remote.webelement.WebElement
      :param n: The number of current item that should be added.
      :type n: int


   .. py:method:: _get_product_name(selected_product)
      :staticmethod:

      Obtain the name of the selected product

      :param selected_product: The web element corresponding to the selected item to be added to
                               cart.
      :type selected_product: selenium.WebElement

      :returns: Name of the Sainsbury's product that has been added to cart.
      :rtype: str


   .. py:method:: _clear_search(self, item)

      Clear the search bar

      :param item: Name of the searched item, the length of which will determine the
                   number of backspaces to send to the search box.
      :type item: str


   .. py:method:: _get_items_products(self, added_products, file)

      Tidy (and save) the searched items and added products

      Creates a dictionary, with keys as the searched items and the values as
      the carted products. Then possibly save this as a csv, if the user has
      inputted a file path.

      :param added_products: The names of the Sainsbury's products that have been added to the
                             cart, corresponding to each searched item.
      :type added_products: list
      :param file: If a str, should be the path to save the searched items/added
                   products as a csv.
      :type file: None or str

      :returns: Keys as the searched items and the values as the carted products.
      :rtype: dict



